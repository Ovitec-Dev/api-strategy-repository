version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: strategy_repository_postgres
    environment:
      POSTGRES_DB: strategy_repository
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - strategy_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: strategy_repository_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - strategy_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Strategy Repository API
  strategy-repository:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: strategy_repository_api
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: strategy_repository
      DB_USER: postgres
      DB_PASSWORD: password
      
      # RabbitMQ Configuration
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672
      RABBITMQ_EXCHANGE: trading_events
      RABBITMQ_QUEUE_PREFIX: strategy_repository
      
      # Application Configuration
      NODE_ENV: production
      PORT: 3000
      API_BASE_URL: http://localhost:3000
      
      # Security
      JWT_SECRET: your-super-secret-jwt-key-here
      JWT_EXPIRES_IN: 24h
      
      # Logging
      LOG_LEVEL: info
      LOG_FILE_PATH: logs/app.log
      
      # External Services
      TRADING_API_URL: http://localhost:8000
      VALIDATION_SERVICE_URL: http://localhost:8001
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - strategy_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: strategy_repository_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - strategy_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local

networks:
  strategy_network:
    driver: bridge 